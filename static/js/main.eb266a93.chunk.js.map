{"version":3,"sources":["components/DrumPad.js","components/Display.js","App.js","reportWebVitals.js","index.js"],"names":["DrumPad","props","playSound","bind","handleKeyDown","document","addEventListener","this","window","focus","removeEventListener","letter","audio","id","toLowerCase","className","onClick","ref","audioPlayer","src","currentTime","play","updateDisplay","event","console","log","key","toUpperCase","React","Component","Display","displayText","App","render","drumPads","map","elem","changeDisplayText","state","clearDisplay","message","duration","setState","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"kQAsDeA,E,kDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAHJ,E,qDAMnB,WACEE,SAASC,iBAAiB,UAAWC,KAAKH,eAC1CI,OAAOC,U,kCAGT,WACEJ,SAASK,oBAAoB,UAAWH,KAAKH,iB,oBAG/C,WAAU,IAAD,OACP,EAAwBG,KAAKN,MAAtBU,EAAP,EAAOA,OAAQC,EAAf,EAAeA,MACTC,EAAE,mBAAeF,EAAOG,eAE9B,OACE,yBAAQC,UAAU,mBAAmBF,GAAIA,EACvCG,QAAST,KAAKL,UADhB,UAEGS,EACD,uBACEM,IACE,SAAAA,GAAG,OAAI,EAAKC,YAAcD,GAE5BJ,GAAIF,EACJI,UAAU,OACVI,IAAKP,S,uBAMb,WACEL,KAAKW,YAAYE,YAAc,EAC/Bb,KAAKW,YAAYG,OAGjBd,KAAKN,MAAMqB,cAAcf,KAAKN,MAAMU,OADnB,Q,2BAInB,SAAcY,GACZC,QAAQC,IAAIF,GACRA,EAAMG,IAAIC,gBAAkBpB,KAAKN,MAAMU,QACzCJ,KAAKL,gB,GA/CW0B,IAAMC,WCUbC,E,4JATb,WACE,OACE,qBAAKf,UAAU,UAAUF,GAAG,UAA5B,SACE,6BAAKN,KAAKN,MAAM8B,oB,GAJFH,IAAMC,WCkEbG,E,kDA9Db,WAAY/B,GAAQ,IAAD,8BACjB,cAAMA,IAQRgC,OAAS,WACP,IAYMC,EAZe,CACnB,CAACvB,OAAQ,IAAKC,MAAO,oHACrB,CAACD,OAAQ,IAAKC,MAAO,qHACrB,CAACD,OAAQ,IAAKC,MAAO,mHACrB,CAACD,OAAQ,IAAKC,MAAO,+GACrB,CAACD,OAAQ,IAAKC,MAAO,+HACrB,CAACD,OAAQ,IAAKC,MAAO,kIACrB,CAACD,OAAQ,IAAKC,MAAO,+HACrB,CAACD,OAAQ,IAAKC,MAAO,+HACrB,CAACD,OAAQ,IAAKC,MAAO,uHAGOuB,KAAI,SAAAC,GAChC,OACE,cAAC,EAAD,CAEEzB,OAAQyB,EAAKzB,OACbC,MAAOwB,EAAKxB,MACZU,cAAe,EAAKe,mBAHfD,EAAKzB,WAQhB,OACE,8BACE,sBAAKE,GAAG,eAAR,UACE,cAAC,EAAD,CAASkB,YAAa,EAAKO,MAAMP,cAEhCG,QApCP,EAAKI,MAAQ,CACXP,YAAa,kCAEf,EAAKM,kBAAoB,EAAKA,kBAAkBlC,KAAvB,gBACzB,EAAKoC,aAAe,EAAKA,aAAapC,KAAlB,gBANH,E,qDA4CnB,SAAkBqC,EAASC,GAAW,IAAD,OACnClC,KAAKmC,SAAS,CACZX,YAAaS,IAGfG,YACE,kBAAM,EAAKJ,iBACXE,K,0BAIJ,WACElC,KAAKmC,SAAS,CACZX,YAAa,S,GA1DDH,IAAMC,WCOTe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASpB,OACP,cAAC,IAAMqB,WAAP,UACE,cAAC,EAAD,MAEFjD,SAASkD,eAAe,SAM1BX,M","file":"static/js/main.eb266a93.chunk.js","sourcesContent":["import React from 'react';\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown)\n    window.focus()\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n  render() {\n    const {letter, audio} = this.props;\n    const id = `drum-pad-${letter.toLowerCase()}`;\n\n    return (\n      <button className=\"DrumPad drum-pad\" id={id}\n        onClick={this.playSound}>\n        {letter}\n        <audio\n          ref={\n            ref => this.audioPlayer = ref\n          }\n          id={letter}\n          className=\"clip\"\n          src={audio}>\n        </audio>\n      </button>\n    )\n  }\n\n  playSound() {\n    this.audioPlayer.currentTime = 0\n    this.audioPlayer.play()\n    \n    const DURATION = 1600\n    this.props.updateDisplay(this.props.letter, DURATION)\n  }\n\n  handleKeyDown(event) {\n    console.log(event)\n    if (event.key.toUpperCase() === this.props.letter) {\n      this.playSound()\n    }\n  }\n}\n\nexport default DrumPad;","import React from 'react';\n\nclass Display extends React.Component {\n  render() {\n    return (\n      <div className=\"display\" id=\"display\">\n        <h1>{this.props.displayText}</h1>\n      </div>\n    )\n  }\n}\n\nexport default Display;","import './App.css';\nimport DrumPad from './components/DrumPad.js';\nimport Display from './components/Display.js';\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayText: 'Click a drum pad to play sound'\n    }\n    this.changeDisplayText = this.changeDisplayText.bind(this);\n    this.clearDisplay = this.clearDisplay.bind(this)\n  };\n\n  render = () => {\n    const drumPadsInfo = [\n      {letter: 'Q', audio: \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Guitars/17[kb]electric_guitarpluck.wav.mp3\"},\n      {letter: 'W', audio: \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Guitars/23[kb]mellow-guitar-chord-3.wav.mp3\"},\n      {letter: 'E', audio: \"https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/Roland%20SH09/247[kb]longlow.wav.mp3\"},\n      {letter: 'A', audio: \"https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/Kawai%20R50/102[kb]CRASH.wav.mp3\"},\n      {letter: 'S', audio: \"https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/Hammond%20Drum%20Machine/17[kb]ham-bd-02.wav.mp3\"},\n      {letter: 'D', audio: \"https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/Hammond%20Drum%20Machine/34[kb]ham-cym-no-1.wav.mp3\"},\n      {letter: 'Z', audio: \"https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/Hammond%20Drum%20Machine/29[kb]ham-hho01.wav.mp3\"},\n      {letter: 'X', audio: \"https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/Hammond%20Drum%20Machine/14[kb]ham-sd-05.wav.mp3\"},\n      {letter: 'C', audio: \"https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/Korg%20ER-1/166[kb]er1-cymbnoiz.wav.mp3\"}\n    ];\n\n    const drumPads = drumPadsInfo.map(elem => {\n      return (\n        <DrumPad\n          key={elem.letter}\n          letter={elem.letter}\n          audio={elem.audio}\n          updateDisplay={this.changeDisplayText}\n        />\n      );\n    })\n\n    return (\n      <div>\n        <div id=\"drum-machine\">\n          <Display displayText={this.state.displayText} />\n\n          {drumPads}\n        </div>\n      </div>\n    );\n  };\n\n  changeDisplayText(message, duration) {\n    this.setState({\n      displayText: message\n    })\n\n    setTimeout(\n      () => this.clearDisplay(),\n      duration\n    )\n  }\n\n  clearDisplay() {\n    this.setState({\n      displayText: \"\"\n    })\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}